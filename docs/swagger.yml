openapi: 3.0.1
info:
  title: core-api
  version: "0.0"
paths:
  /api/v1/baseJoin:
    get:
      operationId: getOwnBaseJoins
      parameters:
      - name: isCreated
        in: query
        required: true
        schema:
          type: boolean
      responses:
        default:
          description: getOwnBaseJoins default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseJoinListRes'
    post:
      operationId: createBaseJoin
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseJoinReq'
        required: true
      responses:
        default:
          description: createBaseJoin default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseJoin'
  /api/v1/baseJoin/{baseJoinId}:
    post:
      operationId: acceptBaseJoin
      parameters:
      - name: baseJoinId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: acceptBaseJoin default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseMember'
    delete:
      operationId: declineBaseJoin
      parameters:
      - name: baseJoinId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: declineBaseJoin default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
  /api/v1/push/send:
    post:
      operationId: sendPush
      parameters: []
      requestBody: {}
      responses:
        default:
          description: sendPush default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Object'
  /api/v1/push/token/:
    post:
      operationId: postToken
      parameters: []
      requestBody: {}
      responses:
        default:
          description: postToken default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpoPushToken'
  /api/v1/news:
    get:
      operationId: getNews
      parameters:
      - name: topic
        in: query
        required: true
        schema:
          type: string
      responses:
        default:
          description: getNews default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRes_NewsArticle_'
  /api/v1/mission/me:
    get:
      description: Not Implemented Yet
      operationId: getOwnActiveMissions
      parameters: []
      responses:
        default:
          description: getOwnActiveMissions default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRes_Mission_'
  /api/v1/mission/base/{baseId}:
    get:
      description: Not Implemented Yet
      operationId: getOwnActiveMissionsByBase
      parameters:
      - name: baseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: getOwnActiveMissionsByBase default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRes_Mission_'
  /api/v1/mission/progress:
    post:
      description: Not Implemented Yet
      operationId: progressMission
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                progressReq:
                  $ref: '#/components/schemas/ProgressReq'
        required: true
      responses:
        default:
          description: progressMission default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRes_Mission_'
  /api/v1/base:
    get:
      operationId: getOwnBases
      parameters: []
      responses:
        default:
          description: getOwnBases default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRes_Base_'
    post:
      operationId: postBase
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseReq'
        required: true
      responses:
        default:
          description: postBase default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base'
  /api/v1/base/{baseId}:
    get:
      operationId: getBaseIfOwn
      parameters:
      - name: baseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: getBaseIfOwn default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Base'
  /api/v1/base/{baseId}/member/me:
    delete:
      summary: Leave a base
      description: must be a member of base
      operationId: leaveBase
      parameters:
      - name: baseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        default:
          description: leaveBase default response
  /api/v1/base/{baseId}/member/{memberAuthKey}:
    delete:
      summary: Kick a member out of a base
      description: must be one of the base admins
      operationId: kickMemberOut
      parameters:
      - name: baseId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: memberAuthKey
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: kickMemberOut default response
  /api/v1/upload/signed-url:
    get:
      operationId: upload
      parameters:
      - name: key
        in: query
        required: true
        schema:
          type: string
      responses:
        default:
          description: upload default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedUrlRes'
  /api/v1/user/me:
    get:
      operationId: getMe
      parameters: []
      responses:
        default:
          description: getMe default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/v1/user:
    put:
      summary: Update user
      operationId: putUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
        required: true
      responses:
        default:
          description: putUser default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      summary: Create user
      operationId: postUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserReq'
        required: true
      responses:
        default:
          description: postUser default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    BaseJoinListRes:
      type: object
      properties:
        requestsList:
          type: array
          items:
            $ref: '#/components/schemas/BaseJoin'
        invitesList:
          type: array
          items:
            $ref: '#/components/schemas/BaseJoin'
    TouchBasePostgresDomain:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
          nullable: true
        creator:
          $ref: '#/components/schemas/User'
    User:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          id:
            type: string
            format: uuid
            nullable: true
          authKey:
            type: string
          username:
            type: string
          email:
            type: string
          score:
            type: number
            format: double
          firstName:
            type: string
          lastName:
            type: string
          imageUrl:
            type: string
          role:
            $ref: '#/components/schemas/Role'
    Role:
      type: string
      enum:
      - MEMBER
      - ADMIN
    BaseJoin:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          base:
            $ref: '#/components/schemas/Base'
          joiningUser:
            $ref: '#/components/schemas/User'
          baseJoinAction:
            $ref: '#/components/schemas/BaseJoinAction'
    Base:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          name:
            type: string
          score:
            type: number
            format: double
          imageUrl:
            type: string
          active:
            type: boolean
          members:
            type: array
            items:
              $ref: '#/components/schemas/BaseMember'
          chats:
            type: array
            items:
              $ref: '#/components/schemas/Chat'
    BaseMember:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          base:
            $ref: '#/components/schemas/Base'
          user:
            $ref: '#/components/schemas/User'
          role:
            $ref: '#/components/schemas/Role'
    Chat:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          base:
            $ref: '#/components/schemas/Base'
          chatpiChatId:
            type: string
    BaseJoinAction:
      type: string
      enum:
      - REQUEST
      - INVITE
    BaseJoinReq:
      type: object
      properties:
        baseId:
          type: string
          format: uuid
        userAuthKey:
          type: string
        baseJoinAction:
          $ref: '#/components/schemas/BaseJoinAction'
    Success:
      type: object
      properties:
        status:
          type: string
    Object:
      type: object
    ExpoPushToken:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
        deviceId:
          type: string
        isValid:
          type: boolean
        expiresAt:
          type: string
          format: date-time
    ListRes_NewsArticle_:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/NewsArticle'
    NewsArticle:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          topic:
            type: string
          data:
            $ref: '#/components/schemas/NewsArticleDetail'
          expiresAt:
            type: string
            format: date-time
    NewsArticleDetail:
      type: object
      properties:
        sourceId:
          type: string
        sourceName:
          type: string
        author:
          type: string
        title:
          type: string
        description:
          type: string
        url:
          type: string
        urlToImage:
          type: string
        publishedAt:
          type: string
        content:
          type: string
    ListRes_Mission_:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Mission'
    Mission:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
          nullable: true
        startedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        assignedUser:
          $ref: '#/components/schemas/User'
        assignedBase:
          $ref: '#/components/schemas/Base'
        missionTemplate:
          $ref: '#/components/schemas/MissionTemplate'
        missionActions:
          type: array
          items:
            $ref: '#/components/schemas/MissionAction'
        isComplete:
          type: boolean
        progress:
          type: integer
          format: int32
        pointsRequired:
          type: integer
          format: int32
    MissionTemplate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        description:
          type: string
        scoreReward:
          type: number
          format: double
        missionType:
          $ref: '#/components/schemas/MissionType'
        detail:
          $ref: '#/components/schemas/MissionTemplateDetail'
    MissionType:
      type: string
      enum:
      - QUESTION
    MissionTemplateDetail:
      type: object
    MissionAction:
      allOf:
      - $ref: '#/components/schemas/TouchBasePostgresDomain'
      - type: object
        properties:
          missionType:
            $ref: '#/components/schemas/MissionType'
    ProgressReq:
      type: object
      properties:
        baseId:
          type: string
          format: uuid
        value:
          type: integer
          format: int32
    ListRes_Base_:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Base'
    BaseReq:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
    SignedUrlRes:
      type: object
      properties:
        url:
          type: string
    UserReq:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        score:
          type: number
          format: double
        firstName:
          type: string
        lastName:
          type: string
        imageUrl:
          type: string
